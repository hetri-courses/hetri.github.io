---
description: 
globs: 
alwaysApply: true
---
# Project Requirement Document

## Overview and Goals

Hetri's MVP (Minimum Viable Product) combines a smart **collar-camera** system with a real-time treat dispensing service called **Treat‑Tap™**. It is designed for use in professional dog daycare/resort facilities, enabling pet owners to stay virtually connected with their dogs throughout the day. The MVP must support two operational modes:

* **Full Collar-Cam + Livestream Mode:** Dogs wear Hetri smart collars equipped with cameras. Pet owners (the "PAW Parents") can watch live video of their dog via a mobile app and remotely request treat deliveries (Treat-Tap).
* **Treat-Tap Only Mode:** For facilities or scenarios where cameras are not deployed, the system still allows pet owners to send treat requests through the app. In this mode, live video streaming is absent, but treat interactions (fulfilled by staff) remain available as a service.

**Goals:** Deliver a functional end-to-end system covering hardware, cloud services, and user applications. The MVP should demonstrate seamless live video streaming, reliable treat request handling, and basic activity monitoring, all while providing a delightful user experience for pet owners and practical tools for daycare staff. This entails meeting core functional requirements (live view, treat requests, device management) and key non-functional requirements (safety, low latency, security, multi-tenant support, etc.) within a realistic startup timeline.

## User Personas

* **PAW Parent (Pet Owner):** A client of the dog daycare (often a pet "parent"). This user uses the mobile app to check on their dog remotely. They want to **view live video** from the dog's perspective, know their pet is safe and happy, and occasionally send a **Treat-Tap** request to give their dog a treat as a loving gesture. PAW Parents value ease of use (quick access to their pet's feed), low latency (real-time feels), and confirmations that their requested interactions (like treat delivery) have occurred. They should only have access to their own pet's data/stream and receive feedback (e.g. "treat delivered!" notifications).

* **PAW Admin (Daycare Staff/Administrator):** An employee or manager at the pet care facility, using the **PAW (Professional Animal Works) management system**. Their concerns are operational: assigning collars to pets, monitoring many dogs, and ensuring all Treat-Tap requests are fulfilled. PAW Admins use an **admin dashboard** (in app or web) to see which dogs are online (wearing a working collar), view live streams as needed (e.g. to check a situation), and get alerts for incoming treat requests or any device issues. They physically give out treats when requests come in (since the collar signals the need) or ensure an automated treat dispenser is triggered if available. They also monitor collar telemetry (battery level, device health, possibly activity data) and get **Help Alerts** from collars if a dog or staff presses an emergency button. They require a clear interface to manage multiple pets and real-time notifications for any events (treat requests, alerts).

* **Hetri Admin (Platform Administrator):** Internal product/system administrators for the Hetri platform. They manage the multi-tenant system and ensure each client facility's environment is configured correctly. Hetri Admins handle provisioning new daycare accounts, registering new collars to the system, and overall system monitoring. They might use a super-admin console to oversee all deployments (e.g. see how many devices are online across all facilities, ensure software updates, manage subscription/license status). They ensure security and privacy standards are maintained and provide support when issues arise. This persona requires more technical controls (like resetting a device, updating firmware over-the-air, or revoking access for a facility if needed).

## Functional Requirements

**Livestream Video**

* *Dog's POV Camera:* In full collar-cam mode, the system shall provide continuous **live video streaming** from the dog's collar camera to the pet owner's mobile app. Video should be reasonably high quality (at least 720p HD if possible) and include low-light capability for indoor use. The video feed should be near real-time (target end-to-end latency ~2 seconds or less) so owners feel truly connected.
* *View Access Control:* Only the pet's owner (and authorized staff or Hetri admins) can view a given dog's live stream. Owners can access the live stream on demand during daycare hours. The system must enforce authentication and authorization before providing the video stream URL or feed, to prevent any unauthorized viewing.
* *Streaming Session Management:* The app will allow the PAW Parent to start viewing the live stream at will, and stop when desired. If multiple family members are allowed access, the system might have multiple concurrent viewers, so streaming solution must handle a few simultaneous clients per stream. The system should handle if a stream is temporarily unavailable (e.g. collar offline) by showing an appropriate message or last known status.

**Treat-Tap Service**

* *Remote Treat Request:* The platform shall enable pet owners to remotely request a treat for their dog through a single "Treat-Tap" button in the mobile app. This triggers a real-time service request to the facility. In full mode, the request is also relayed to the dog's collar (which may play a tone or LED indication so the dog anticipates a treat). In Treat-Tap-only mode (no collar camera), the functionality still exists: the owner's app sends a treat request to the facility staff.
* *Staff Notification & Fulfillment:* Upon an owner's treat request, the **PAW Admin dashboard** at the facility is immediately notified in real time (e.g. a pop-up or sound alert indicating "Treat request for Bella"). Staff should be able to see which pet and which owner (maybe display a short message like "Bella's mom sent a treat!"). Staff will then physically give a treat to the dog. The system should allow staff to acknowledge/mark the request as completed so that the owner can be notified (and possibly so the system can prevent spamming multiple treat requests in a short time).
* *Rate Limiting & Safety:* The system shall include rules to avoid overfeeding or abuse of Treat-Tap. For example, limit the frequency of treat requests per pet (e.g. at most one every 30 minutes per dog, configurable by admins). If a request comes when the dog is not present or already had many treats, the staff or system may queue or delay it. The treat size/type is outside software scope but the system might log each treat event for the owner and facility records.
* *Feedback to Owner:* After a treat request is fulfilled, the owner's app should get a confirmation (e.g. a notification or on-screen message like "Treat delivered!" with maybe a short delay timestamp). In MVP this could simply be based on the staff clicking a "treat given" button on their side, or an automated confirmation if the collar detects the treat dispenser triggered. This closes the loop for the owner, providing reassurance that their pet got the reward.

**Collar Telemetry & Activity Monitoring**

* *Activity Sensing:* The smart collar will include basic sensors (such as an accelerometer) to monitor the dog's activity level in real-time. The system shall capture metrics like motion or steps, and possibly whether the dog is currently active or resting. For MVP, this could simply be delivered as periodic status updates (e.g. "Pet is active" or a simple activity score). Over time, this can feed into daily activity reports for owners or help staff detect if a dog is unusually lethargic or overly agitated.
* *Health and Environment:* The collar may monitor ambient **temperature** or other environmental data to ensure pet comfort (if hardware supports it). MVP hardware includes an accelerometer (for motion) and can optionally support temperature sensing; those readings shall be sent periodically. The system shall also monitor device health: primarily **battery level** of the collar. PAW Admins need to see battery status for each active collar so they can charge them in time to avoid stream dropouts. If battery falls below a threshold, the system could alert staff (e.g. "Collar 5 battery low – please swap or charge soon").
* *Help Alerts:* The system shall support a **Help Alert** feature for safety. In MVP, this could be implemented as either a button on the collar that staff can press if they need urgent assistance (like a panic button during a dog incident), **or** a software trigger in the staff app. When activated, an alert is instantly sent to all relevant admins/staff (e.g. via the admin dashboard highlighting which dog/area needs help). The system might also forward this alert to Hetri Admins or trigger emergency protocols. If the collar itself triggers it (perhaps by long-press of a button or automated detection of a dog's distress via sensors), the collar would publish an "help_request" event that the backend and admin app react to. This feature improves safety by enabling quick responses to incidents.

**User Management & Onboarding**

* *PAW Parent Onboarding:* The system shall allow pet owners to create an account (or use an invite) to access their pet's live feed. Given that the service is tied to a particular facility, the **onboarding process will involve connecting the owner to their pet at that facility**. MVP approach: a facility staff creates a pet profile and owner account in the PAW system (or invites the owner via email). The owner then logs into the mobile app with those credentials. Upon login, they should see their pet's profile and can access live features when the pet is checked in with a collar. Alternatively, a unique code could be generated for each pet/daycare combo that the owner enters to link their app to the stream. The system must ensure an owner can only access their own pet's feed – if the owner has multiple pets at the facility, all their pets should be accessible under their account.
* *Facility Admin Onboarding:* Each client facility (dog resort/daycare) gets a separate tenant account on the platform. Hetri Admins or an automated signup system will provision a new **PAW account** for the facility, including initial admin user credentials. The PAW Admin (e.g. the daycare manager) can then add other staff users, register the collars, and manage their facility settings via the admin interface. The MVP should allow the facility admin to easily **register (pair) new collar devices** to their account (see Device Management below) and fill in information like their facility name, dog roster, etc.
* *Device/Collar Provisioning:* When a new smart collar device is deployed at a facility, it must be securely paired with that facility's account. The device will have a unique ID and a secret pairing key (often provided as a QR code on the device). The PAW Admin will use the staff app to scan the QR code of the collar, and the app will send the info to the backend to register that device under the facility (after verifying the code). Once paired, the collar is known to the system and can be assigned to a specific pet profile. For MVP, we assume collars are provisioned in the database ahead of time with their IDs and keys (or the backend accepts the first-time registration with a valid key). After pairing, the device will connect via MQTT using credentials issued by the backend, and the system will mark it as **online**.
* *Pet Check-in Workflow:* At the start of each daycare day (or whenever a dog arrives), staff need to assign a collar to that dog. The system shall provide a quick way to **assign an available collar device to a pet's profile** (and optionally to a location or room). This could be done in the admin app by selecting the pet from today's check-in list and selecting which collar ID they are wearing. Alternatively, scanning the collar's QR while selecting the pet could auto-assign it. Once assigned, the backend links that device's feed to the owner's app. At check-out, staff unassign the collar (freeing it for another dog if needed) and possibly put it on charge. The system should handle reassignments and ensure that owners only see the feed when their pet is currently checked in with a collar.

**PAW Admin Dashboard Functions**

* *Live Monitoring:* The PAW Admin interface shall list all currently active dogs/collars with relevant info (pet name, maybe a thumbnail of video or an icon showing connectivity). Staff can click on a specific dog to view the live stream from that collar if needed (useful for supervising or troubleshooting). In Treat-Tap-only mode, live video might not be present, but staff might have other monitoring info (like which dogs are checked in, any treat requests pending).
* *Treat Request Queue:* There shall be a clear view for incoming treat requests. Each request includes timestamp, pet name, and owner's name (or a message). The admin should be able to acknowledge a request (which ideally notifies the owner). The interface might also log fulfilled requests so staff can track how many treats given (for accountability).
* *Alerts & Telemetry:* The admin dashboard will show any **alerts** (like Help Alerts from a collar or system warnings). It should prominently display critical alerts (e.g., if a Help Alert triggers, or if a device disconnects unexpectedly). Additionally, telemetry like battery levels should be accessible—perhaps a small battery icon next to each collar's listing, turning red if low. Activity info could be shown as well (like an indicator if the dog is sleeping vs active, or the last motion time). These help staff ensure devices are functioning and pets are okay.
* *Administrative Tools:* The MVP admin interface will provide basic management: adding/editing pet profiles (name, breed, owner info), assigning devices as mentioned, and viewing device status (online/offline). It should also allow admins to manage their staff users (create logins for employees) and their own facility settings (like what times treat requests are allowed, etc.). Some of these might be simplified or handled through initial configuration for MVP (e.g., assume one admin user or minimal user management to start).

**System Administration (Hetri Admin) Functions**

* *Tenant Management:* Hetri Admins shall be able to create and manage facility accounts in the system. MVP might include a simple admin web interface or even a database script for creating a new tenant with a name, ID, and initial admin user. They should also be able to deactivate a tenant (if a facility's subscription ends) which would revoke access.
* *Device Fleet Management:* Hetri Admins need insight into all devices deployed. They should maintain a registry of all collars (device IDs, which facility they are assigned to, firmware version, etc.). MVP may include an internal dashboard or just database access for this. They may perform operations like remotely updating firmware (likely future feature), or marking devices as lost/defective.
* *Support and Monitoring:* The platform admins should be able to monitor system health: are all services (backend, broker, streaming server) running properly? They might have access to logs or metrics dashboards. For MVP, basic logging and the ability to query device statuses is sufficient. Additionally, Hetri Admin might help troubleshoot for a facility – e.g. they could have the ability to view a stream for support purposes or impersonate an admin user, with appropriate audit logging.

## Non-Functional Requirements

**Performance & Scalability:**

* *Low Latency:* The end-to-end latency from a live event to the owner seeing it on video should be minimal. Aim for ~1-2 seconds latency on the video stream under good conditions, and treat command delivery under 1 second to the device. This will likely use efficient streaming (HLS segments of 1-2s or possibly WebRTC in future) and MQTT for instant messaging.
* *Throughput & Load:* The system should handle multiple simultaneous streams and treat interactions. A single facility might have dozens of collars active; not all owners will watch at once, but the design should allow scaling to e.g. 50+ concurrent video streams across the user base. The cloud architecture (FFmpeg transcoders, CDN) should be able to scale horizontally or use cloud services as needed to support more streams. Database and MQTT broker should handle bursts of messages (each treat tap or telemetry update is small, but many devices sending data).
* *Multi-Tenant Isolation:* Data and access must be isolated per tenant (facility). One facility's admin or clients must never see or affect another's data. The system should enforce tenant-scoped queries for all backend operations (each user's session tied to a tenant ID). Additionally, streaming endpoints must be segregated (e.g. include a unique path or token per tenant/device) to ensure no cross-access. If using shared infrastructure (e.g. one MQTT broker for all tenants), robust ACLs or topic namespaces will isolate topics.
* *Security:* All communications will be encrypted (HTTPS for API, WSS or TLS for MQTT, and secure TLS for video streaming via CloudFront or secure link). User authentication tokens (JWTs) must be securely issued and validated. Sensitive data like passwords will be stored hashed. IoT devices will authenticate to the broker with unique credentials or certificates – so that rogue devices cannot connect. Access to video feeds will be protected by expiring signed URLs or tokens. The system should also guard against common web vulnerabilities (OWASP top 10 for the API).
* *Reliability & Robustness:* The system should be resilient to intermittent connectivity since devices are wireless and on battery. The collar device should automatically reconnect if connection drops. The backend should gracefully handle device disconnects (mark them offline) and ensure queued treat commands are either delivered when the device reconnects or notify staff of failure. There should be reasonable **timeout and retry** mechanisms for critical operations (e.g., if a treat request isn't acknowledged by a staff in a certain time, maybe alert again). Data integrity is important: logs of treats or events should be stored reliably (ACID properties via the SQL database). Use of transactions where appropriate and consistent backups for the database are expected (even if manual backups in MVP).
* *Device Constraints:* The collar hardware has limited battery and processing power. As such, the software design should minimize heavy processing on the device. The device will offload video encoding to specialized hardware or send in a lightweight format (like MJPEG) for the cloud to handle encoding. Communication protocols (MQTT) are chosen for low overhead. Additionally, the collar should have a **battery life** long enough for a full daycare day in active use (target 8-10 hours active streaming, or multi-day standby). To extend battery life, non-critical sensors should sample infrequently, and the device might use power-saving modes (e.g. deep sleep when pet is inactive for a long period). The hardware must be **water-resistant** (dogs may play in water or slobber) and durable. The design accounts for these by requiring an IPx7+ enclosure and robust materials (non-functional hardware requirement).
* *Usability:* The mobile app and admin dashboard should be intuitive. Pet owners may not be tech-savvy, so the app will have a **simple, friendly UI** – open app, see your pet's video, tap a button for treats. Admin staff are often busy; the dashboard should emphasize clarity: e.g., large indicators for new treat requests (using distinctive color or animation for visibility), straightforward navigation between dog feeds, etc. The **Von Restorff effect** (Isolation effect) is leveraged in design – for example, the "Send Treat" button might be a unique bright color to stand out among other controls. The system should also provide helpful feedback (loading spinners, confirmation dialogs for actions that have consequences, etc.).
* *Maintainability & Extensibility:* The architecture should be modular so new features can be added. For instance, adding recorded video clips or analytics in the future should be possible without a complete redesign. Clean separation of concerns (device firmware vs. cloud vs. app) ensures teams can work in parallel. The codebase should be well-documented and follow consistent conventions so new developers (or AI coding assistants) can easily follow. MVP will be delivered under tight timelines, but should still aim for code quality and use of proven frameworks to reduce technical debt.
* *Compliance:* If storing any personal data (owner info, possibly video of pets which owners consider private), we should adhere to relevant privacy laws (e.g., GDPR if applicable, though likely not for internal US-based usage). Ensure user credentials and personal info are protected. Also, since this involves animals, consider any regulations for pet care communications (likely none specific, but facilities might have their own policies). MVP likely doesn't involve financial transactions (unless treat requests are monetized) so PCI not in scope. However, as a multi-tenant B2B2C platform, it should allow each business to have their data separate for legal and competitive reasons.

**Assumptions and Constraints:**

* Assume the daycare facilities have reliable Wi-Fi coverage which devices can use (cellular backup for collars is a possible future enhancement but not in MVP scope due to cost and complexity).
* We assume one camera collar per dog at a time. If a dog group is large, not every dog may have a camera – but MVP doesn't cover camera switching or shared cameras; each active device is tied to one pet for the session.
* Treat dispensing in MVP is fulfilled by humans (staff). We assume the facility will have treats on hand and a protocol for staff to deliver them promptly. In later versions, an automated treat dispenser device might integrate, but MVP focuses on manual fulfillment with tech coordination.
* The schedule of daycare (e.g., operating hours) is considered – streaming and treat services are only active during facility hours. The system might disable or queue treat requests off-hours. This will be configured per tenant.
* The **PAW management** features like booking, billing, staff scheduling (mentioned in company overview) are mostly outside the MVP scope, except where they directly intersect (like linking to pet profiles, maybe logging treat events). MVP will focus on the new functionality (camera, treats) and rely on basic placeholders for management features if needed.


